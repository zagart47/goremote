// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/goremote.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteControlClient is the client API for RemoteControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteControlClient interface {
	GetScreenshot(ctx context.Context, in *ScreenshotRequest, opts ...grpc.CallOption) (RemoteControl_GetScreenshotClient, error)
}

type remoteControlClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteControlClient(cc grpc.ClientConnInterface) RemoteControlClient {
	return &remoteControlClient{cc}
}

func (c *remoteControlClient) GetScreenshot(ctx context.Context, in *ScreenshotRequest, opts ...grpc.CallOption) (RemoteControl_GetScreenshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &RemoteControl_ServiceDesc.Streams[0], "/proto.RemoteControl/GetScreenshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteControlGetScreenshotClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RemoteControl_GetScreenshotClient interface {
	Recv() (*ScreenshotResponse, error)
	grpc.ClientStream
}

type remoteControlGetScreenshotClient struct {
	grpc.ClientStream
}

func (x *remoteControlGetScreenshotClient) Recv() (*ScreenshotResponse, error) {
	m := new(ScreenshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteControlServer is the server API for RemoteControl service.
// All implementations must embed UnimplementedRemoteControlServer
// for forward compatibility
type RemoteControlServer interface {
	GetScreenshot(*ScreenshotRequest, RemoteControl_GetScreenshotServer) error
	mustEmbedUnimplementedRemoteControlServer()
}

// UnimplementedRemoteControlServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteControlServer struct {
}

func (UnimplementedRemoteControlServer) GetScreenshot(*ScreenshotRequest, RemoteControl_GetScreenshotServer) error {
	return status.Errorf(codes.Unimplemented, "method GetScreenshot not implemented")
}
func (UnimplementedRemoteControlServer) mustEmbedUnimplementedRemoteControlServer() {}

// UnsafeRemoteControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteControlServer will
// result in compilation errors.
type UnsafeRemoteControlServer interface {
	mustEmbedUnimplementedRemoteControlServer()
}

func RegisterRemoteControlServer(s grpc.ServiceRegistrar, srv RemoteControlServer) {
	s.RegisterService(&RemoteControl_ServiceDesc, srv)
}

func _RemoteControl_GetScreenshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScreenshotRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RemoteControlServer).GetScreenshot(m, &remoteControlGetScreenshotServer{stream})
}

type RemoteControl_GetScreenshotServer interface {
	Send(*ScreenshotResponse) error
	grpc.ServerStream
}

type remoteControlGetScreenshotServer struct {
	grpc.ServerStream
}

func (x *remoteControlGetScreenshotServer) Send(m *ScreenshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RemoteControl_ServiceDesc is the grpc.ServiceDesc for RemoteControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RemoteControl",
	HandlerType: (*RemoteControlServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetScreenshot",
			Handler:       _RemoteControl_GetScreenshot_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/goremote.proto",
}
